from django.shortcuts import render,redirect,get_object_or_404,reverse
# from customers.models import Mapping
from audtech_analytics.models import Engagement,FinalTable,CompanyInfo
from django.http import HttpResponse
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.decorators import permission_required
import pandas as pd
import pdfkit 
from django.conf import settings
from django_pandas.io import read_frame
from django.contrib.auth.models import Permission,Group
from customers.forms import EngagementForm,CreateUserForm,companyinfo
from django.db.models.functions import Cast
from tenant_schemas.utils import schema_context
from django.contrib import messages
# Create your views here.

def main_page(request):
    return render(request,'index2.html')
def PermissionDenied(request):
    return render(request,'PermissionDenied.html')
# def form(request):
#      return render(request,'alertcreated.html')
def CompanyInformation(request):
    context={}
    if request.method == 'GET':
        form = companyinfo()
        context['form']=form
        return render(request,'companyinfo.html',context)
    elif request.method =="POST":
        with schema_context(request.session.get('schema_name')):
            form = companyinfo(request.POST)
            if form.is_valid():
                New=form.save(commit=False)
                New.user_id=request.session.get('username')
                New.save()
                return redirect('/home2')
            else:
                messages.error(request,str(form.errors.as_text()))
    return render(request,'companyinfo.html',context)

def navbar(request):
    context={}
    context['username']=request.session.get('username')
    context['customer']='collabera'
    return render(request,'nav.html',context)
def handler404(request):
    return render(request, '404.html', status=404)
def handler500(request):
    return render(request, '404.html', status=404)
def DisplayData(request):
    context={}
    if request.method=="GET":      
        with schema_context(request.session.get('schema_name')):  
            context['objects']=(pd.DataFrame(read_frame(FinalTable.objects.all()))).to_html()
        return render(request,'showdata.html',context)
def pdfconvertor(request):
    pdfkit.from_url(settings.BASE_DIR+'/templates/'+'analytics.html', 'out.pdf')
    return HttpResponse("'out.pdf'")
def Home(request):
    context={}
    context['clientname']=request.session.get('clientname')
    context['username']=request.session.get('username')
    context['customer']='collabera'
    context['engangement']=request.session.get('engangement')
    context['username']=request.session.get('username')
    context['customer']='collabera'
    with schema_context(request.session.get('schema_name')):
        details=Engagement.objects.filter(user_id=request.session.get('username'))
        context['details']=details
        return render(request,'home.html',context)
def Home2(request):
    context={}
    context['clientname']=request.session.get('clientname')
    context['username']=request.session.get('username')
    context['customer']='collabera'
    context['engangement']=request.session.get('engangement')
    context['username']=request.session.get('username')
    context['customer']='collabera'
    with schema_context(request.session.get("schema_name")):
        details=User.objects.all()
        context['details']=details
        return render(request,'home2.html',context)
#     return render(request,'NewClient.html',context)
# def ERPMap (request):
#     context={}
#     context['engangement']=request.session.get("engangement")
#     context['username']=request.session.get('username')
#     context['customer']='collabera'
#     if request.method == 'GET':
#         form = ERPform()
#         context['form']=form
#         return render(request,'ERPForm.html',context)
#     elif request.method =='POST':
#         form = ERPform(request.POST,request.FILES)
#         print(form)
#         if form.is_valid():
#             #obj=form.save(commit=False)
#             form=ERPform()
#             context['form']=form
#             obj=Mapping.objects.create(source_filed=request.POST.get("source_filed"),final_field=request.POST.get("final_field"),transaction_type=request.POST.get("transaction_type"),erp=request.POST.get("erp"))
#             data=Mapping.objects.filter(erp=request.POST.get('erp'))
#             context['data']=data
#             return render(request,'ERPForm.html',context)
#         else:
#             context['form']=form
#     return render(request,'ERPForm.html',context)

from django.views.generic.edit import UpdateView
def CreateUser (request):
    context={}
    context['username']=request.session.get('username')
    context['customer']='collabera'
    context['clientname']=request.session.get("clientname")
    if request.method == 'GET':
        with schema_context(request.session.get('schema_name')):
            form = CreateUserForm()
            context['form']=form
            return render(request,'createuser.html',context)
    elif request.method == 'POST':
        with schema_context(request.session.get('schema_name')):
            form = CreateUserForm(request.POST)
            if form.is_valid():
                user=form.save(commit=False)
                # user.refresh_from_db()
                user.save()
                # group=Group.objects.get(id=request.POST.get('groups'))
                for i in request.POST.getlist('user_permissions'):
                    permission = Permission.objects.get(name =i)
                    # group.permissions.add(permission)
                    user = User.objects.get(username=request.POST.get('username'))
                    user.user_permissions.add(permission)
                    user=user.id
                    # group.user_set.add(user)
                return redirect('/home2')
            else:
                messages.error(request,str(form.errors.as_text())) 
    return render(request,'createuser.html',context)
    
# @permission_required("audtech_analytics.add_engagement",login_url='/PermissionDenied')
def EngagementDATA(request):
    context={}
    context['username']=request.session.get('username')
    context['customer']='collabera'
    if request.method == 'GET':
        with schema_context(request.session.get('schema_name')):
            form = EngagementForm()
            context['form']=form
            return render(request,'NewClient.html',context)
    elif request.method =='POST':
        with schema_context(request.session.get('schema_name')):
            form = EngagementForm(request.POST,request.FILES)
            if form.is_valid():
                obj=form.save(commit=False)
                request.session["engangement"]=request.POST.get("engagement_name")
                request.session["clientname"]=request.POST.get('name')
                request.session["Currency"]=request.POST.get('Currency')
                request.session["start_month"]=request.POST.get('fiscal_start_month').strip('/')
                request.session["end_month"]=request.POST.get('fiscal_end_month').strip('/')
                request.session["erp"]=request.POST.get("financial_management_system")
                obj.user_id=request.session.get('username')
                print(request.session.get('schema_name'))
                obj.save()
                user=User.objects.get(username=request.session.get('username'))
                print(user)
                if user.has_perm("audtech_analytics.is_import"):
                    return redirect('/processfile')
                else:
                    return redirect("/home")
            else:
                context['form']=form
		"""
Django settings for deletekro project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '60=@q26-9yve*7@a_9(x8dbf7^9#kk@a#0_c!&c+t@u+)i7&1='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
SITE_ID = 1
ALLOWED_HOSTS = ['localhost','127.0.0.1']

SHARED_APPS = (
    'tenant_schemas',  # mandatory
    'customers',  # you must list the app where your tenant model resides in
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
)
TENANT_APPS = (
    # The following Django contrib apps must be in TENANT_APPS
    'audtech_analytics',
    'django.contrib.contenttypes',
    'django.contrib.auth',
)

INSTALLED_APPS = [
    'tenant_schemas',
    'customers',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'audtech_analytics',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'crispy_forms',
    'widget_tweaks',
]

# SESSION_SAVE_EVERY_REQUEST = True
# SESSION_COOKIE_HTTPONLY = False

# SESSION_ENGINE = 'django.contrib.sessions.backends.file'
# SESSION_FILE_PATH = os.path.join(BASE_DIR, 'Session')
# SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'


MIDDLEWARE = [
'audtech_project.middleware.TenantTutorialMiddleware', 
'django.contrib.sessions.middleware.SessionMiddleware',
'django.middleware.common.CommonMiddleware',
'django.middleware.csrf.CsrfViewMiddleware',
'django.contrib.auth.middleware.AuthenticationMiddleware',
'django.contrib.messages.middleware.MessageMiddleware',
# 'django.middleware.clickjacking.XFrameOptionsMiddleware',
'django.middleware.security.SecurityMiddleware',
]
ROOT_URLCONF = 'audtech_project.urls'

TENANT_MODEL = "customers.Client"  # app.Model

DEFAULT_FILE_STORAGE = 'tenant_schemas.storage.TenantFileSystemStorage'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
	'DIRS': [
            os.path.join(os.path.dirname(__file__), '..', 'templates').replace('\\', '/'),
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.static',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'audtech_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
       'ENGINE': 'tenant_schemas.postgresql_backend',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'audtech_project',                    # Or path to database file if using sqlite3.
        'USER': 'myprojectuser',
        'PASSWORD': 'root',
        'HOST': 'localhost',   # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': '',            # Set to empty string for default.
    }
}

DATABASE_ROUTERS = (
    'tenant_schemas.routers.TenantSyncRouter',
)


TEST_RUNNER = 'django.test.runner.DiscoverRunner'
# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
MEDIA_ROOT = ''

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
STATIC_URL = '/static/'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)
STATICFILES_DIRS = [
     os.path.join(os.path.dirname(__file__), '..', 'static').replace('\\', '/'),
]
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR),'audtech_project/static_cdn')
# LOGGING = {
    # 'version': 1,
    # 'disable_existing_loggers': False,
    # 'filters': {
        # 'require_debug_false': {
            # '()': 'django.utils.log.RequireDebugFalse'
        # }
    # },
    # 'handlers': {
#    /     'mail_admins': {
            # 'level': 'ERROR',
            # 'filters': ['require_debug_false'],
            # 'class': 'django.utils.log.AdminEmailHandler'
        # }
    # },
    # 'loggers': {
        # 'django.request': {
            # 'handlers': ['mail_admins'],
            # 'level': 'ERROR',
            # 'propagate': True,
        # },
    # }
# }

    	return render(request,'NewClient.html',context)


